# 说明
1、使用Dict类型存入每个X值(0-9为Key)，累加（不含当前Index）其和与个数，再求相除求平均值
2、将X值转为字符型
3、用cython加速，cpdef export function
4、colab安装 !pip install git+https://github.com/rkern/line_profiler.git

######################## Cython 代码如下：##########################
%load_ext Cython

--The Cython extension is already loaded. To reload it, use:
  %reload_ext Cython

%%cython -a

import numpy as np
cimport numpy as cnp
import pandas as pd

cpdef target_mean_test(x,y):
  dl = x.shape[0]
  result = np.zeros(dl)
  # 定义字典类型，用于第个X的和与个数
  value_elements = dict()
  count_elements = dict()
  for i in range(dl):
    x_value = str(x[i, 0])
    y_value = y[i, 0]
    # 如果X是第一次出现，就直接存入，否则就累加
    if (x_value not in value_elements):
      value_elements[x_value] = y_value
      count_elements[x_value] = 1
    else:
      value_elements[x_value] += y_value
      count_elements[x_value] += 1
  for i in range(dl):
    x_value = str(x[i, 0])
    y_value = y[i, 0]
    # 去掉当前所在Index的Y值
    result[i] = (value_elements[x_value] - y_value) / (count_elements[x_value] - 1)
  return result


#########编译结果###############
Generated by Cython 0.29.21

Yellow lines hint at Python interaction.
Click on a line that starts with a "+" to see the C code that Cython generated for it.

 01: 
+02: import numpy as np
 03: cimport numpy as cnp
+04: import pandas as pd
 05: 
+06: cpdef target_mean_test(x,y):
static PyObject *__pyx_pw_46_cython_magic_d60f2ad4460dc3e0d9b022c2c247762f_1target_mean_test(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_46_cython_magic_d60f2ad4460dc3e0d9b022c2c247762f_target_mean_test(PyObject *__pyx_v_x, PyObject *__pyx_v_y, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_v_dl = NULL;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_value_elements = NULL;


#########测试函数#########
%%timeit
x = np.random.randint(10, size=(50000, 2))
y = np.random.randint(2, size=(50000, 2))
result = target_mean_test(x, y)
print(result)

#运行结果
[0.50541658 0.50873016 0.504176   ... 0.4969611  0.5041456  0.50129199]
[0.50541658 0.50873016 0.504176   ... 0.4969611  0.5041456  0.50129199]
[0.50541658 0.50873016 0.504176   ... 0.4969611  0.5041456  0.50129199]
[0.50541658 0.50873016 0.504176   ... 0.4969611  0.5041456  0.50129199]
[0.50541658 0.50873016 0.504176   ... 0.4969611  0.5041456  0.50129199]
[0.50541658 0.50873016 0.504176   ... 0.4969611  0.5041456  0.50129199]
[0.50541658 0.50873016 0.504176   ... 0.4969611  0.5041456  0.50129199]
....
10 loops, best of 3: 180 ms per loop








######################## python 代码如下：########################
# coding = 'utf-8'
import numpy as np
import pandas as pd

def target_mean_test(data,x_name,y_name):
  result = np.zeros(data.shape[0])
  # 定义字典类型，用于第个X的和与个数
  value_elements = dict()
  count_elements = dict()
  for i in range(data.shape[0]): 
    x_value = data.loc[i, x_name]
    y_value = data.loc[i, y_name]
    if (x_value not in value_elements.keys()):
      value_elements[x_value] = y_value
      count_elements[x_value] = 1
    else:
      value_elements[x_value] += y_value
      count_elements[x_value] += 1
  for i in range(data.shape[0]):
    x_value = data.loc[i, x_name]
    y_value = data.loc[i, y_name]
    # 去掉当前所在Index的Y值
    result[i] = (value_elements[x_value] - y_value) / (count_elements[x_value] - 1)

  return result  

###调用#####
x = np.random.randint(10, size=(50000, 1))
y = np.random.randint(2, size=(50000, 1))
data = pd.DataFrame(np.concatenate([y, x], axis=1), columns=['y', 'x'])

from line_profiler import LineProfiler
lp2 = LineProfiler()
lp2_wrapper = lp2(target_mean_test)
lp2_wrapper(data, 'y', 'x')
lp2.print_stats()

result = target_mean_test(data, 'x', 'y')
print(result)


Timer unit: 1e-06 s

Total time: 4.16412 s
File: <ipython-input-28-a254ce4b5ede>
Function: target_mean_test at line 1

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     1                                           def target_mean_test(data,x_name,y_name):
     2         1        312.0    312.0      0.0    result = np.zeros(data.shape[0])
     3                                             # 定义字典类型，用于第个X的和与个数
     4         1          1.0      1.0      0.0    value_elements = dict()
     5         1          0.0      0.0      0.0    count_elements = dict()
     6     50001      23971.0      0.5      0.6    for i in range(data.shape[0]): 
     7     50000     994686.0     19.9     23.9      x_value = data.loc[i, x_name]
     8     50000     973200.0     19.5     23.4      y_value = data.loc[i, y_name]
     9     50000      37997.0      0.8      0.9      if (x_value not in value_elements.keys()):
    10         2          1.0      0.5      0.0        value_elements[x_value] = y_value
    11         2          2.0      1.0      0.0        count_elements[x_value] = 1
    12                                               else:
    13     49998      42960.0      0.9      1.0        value_elements[x_value] += y_value
    14     49998      34636.0      0.7      0.8        count_elements[x_value] += 1
    15     50001      25422.0      0.5      0.6    for i in range(data.shape[0]):
    16     50000     985495.0     19.7     23.7      x_value = data.loc[i, x_name]
    17     50000     967274.0     19.3     23.2      y_value = data.loc[i, y_name]
    18                                               # 去掉当前所在Index的Y值
    19     50000      78158.0      1.6      1.9      result[i] = (value_elements[x_value] - y_value) / (count_elements[x_value] - 1)
    20                                           
    21         1          1.0      1.0      0.0    return result      

[0.49969419 0.50421651 0.50221328 ... 0.5040204  0.49969419 0.49989806]


Cython执行时间为180ms per Loop，python总共花4.16412 s.

